-- Load the Rayfield library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the main window
local Window = Rayfield:CreateWindow({
   Name = "Animal Info Display",
   LoadingTitle = "Animal Information",
   LoadingSubtitle = "Loading Data...",
   ToggleUIKeybind = "End", -- You can change this keybind
})

-- Create a tab to hold the information
local AnimalTab = Window:CreateTab("Rendered Animals", "footprints") -- Using a lucide icon

-- Create a paragraph element that will display all the animal data.
-- We will update this element instead of creating and destroying labels.
local InfoParagraph = AnimalTab:CreateParagraph({
    Title = "Live Animal Data", 
    Content = "Searching for animals..."
})

-- Function to update the display with the latest animal info
local function updateDisplay()
    local animalsFolder = workspace:FindFirstChild("RenderedMovingAnimals")
    local animalCount = 0
    local contentString = ""

    -- Check if the folder exists and has animals in it
    if not animalsFolder or #animalsFolder:GetChildren() == 0 then
        contentString = "No rendered moving animals found in workspace."
    else
        local allAnimalInfo = {}
        animalCount = #animalsFolder:GetChildren()

        for _, animal in ipairs(animalsFolder:GetChildren()) do
            -- Safely get position, default to (0,0,0) if no primary part
            local pos = animal.PrimaryPart and animal.PrimaryPart.Position or Vector3.new(0, 0, 0)
            
            -- Safely get a number from the debug ID as in the original script
            local debugIdNum = 0
            local success, result = pcall(function()
                debugIdNum = animal:GetDebugId(100):sub(1, 4):byte(1)
            end)
            if not success or not debugIdNum then
                debugIdNum = 0 -- Fallback if it fails
            end

            -- Format the string for this animal
            local infoLine = string.format(
                "%s [%d] - Pos: (%.1f, %.1f, %.1f)",
                animal.Name,
                debugIdNum,
                pos.X,
                pos.Y,
                pos.Z
            )
            table.insert(allAnimalInfo, infoLine)
        end
        -- Join all the individual animal lines into one string
        contentString = table.concat(allAnimalInfo, "\n")
    end

    -- Update the paragraph with the new title and content
    InfoParagraph:Set({
        Title = "Live Animal Data (" .. animalCount .. ")", 
        Content = contentString
    })
end

-- Create a loop that runs the update function every 0.5 seconds
task.spawn(function()
    -- The `while true do` loop will run forever until the script is stopped.
    -- The `Window.Visible` check ensures it only updates when the UI is actually open.
    while true do
        if Window.Visible then
            -- We wrap the update function in a pcall (protected call) to prevent
            -- any errors from stopping the entire loop.
            pcall(updateDisplay)
        end
        task.wait(0.5)
    end
end)
