-- Rayfield-powered "Rendered Moving Animals" viewer
-- Requires an executor with HttpGet enabled

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- === Window ===
local Window = Rayfield:CreateWindow({
    Name = "Animal Info Display",
    Icon = "rewind",                 -- Lucide icon example per docs
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ShowText = "Rayfield",
    Theme = "Default",

    ToggleUIKeybind = "K",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AnimalViewer",
        FileName = "RenderedMovingAnimals"
    },

    Discord = { Enabled = false },
    KeySystem = false
})

-- === Tab & Section ===
local Tab = Window:CreateTab("Animals", "rewind")
local Section = Tab:CreateSection("Rendered Moving Animals")

-- A label to show status (count / errors)
local StatusLabel = Tab:CreateLabel("Status: Waiting...")

-- We'll maintain one Paragraph per animal (easier multi-line + auto-size)
-- Map of instance -> Paragraph UI
local AnimalParagraphs = {}

-- === Settings (with config flags so they persist) ===
local RefreshRate = 0.5
local ShowIDs = true
local AutoRefreshEnabled = true

local ToggleAuto = Tab:CreateToggle({
    Name = "Auto Refresh",
    CurrentValue = true,
    Flag = "AutoRefreshToggle",
    Callback = function(v)
        AutoRefreshEnabled = v
    end
})

local SliderRate = Tab:CreateSlider({
    Name = "Refresh Rate",
    Range = {0.1, 5},
    Increment = 0.1,
    Suffix = "sec",
    CurrentValue = 0.5,
    Flag = "RefreshRateSlider",
    Callback = function(v)
        RefreshRate = v
    end
})

local ToggleIDs = Tab:CreateToggle({
    Name = "Show Instance IDs",
    CurrentValue = true,
    Flag = "ShowIDsToggle",
    Callback = function(v)
        ShowIDs = v
    end
})

local RefreshBtn = Tab:CreateButton({
    Name = "Refresh Now",
    Callback = function()
        task.spawn(function()
            updateDisplay()
        end)
    end
})

-- === Utilities ===
local function fmtVec3(vec3)
    return string.format("(%.1f, %.1f, %.1f)", vec3.X, vec3.Y, vec3.Z)
end

local function animalInfo(animal)
    local idStr = ""
    if ShowIDs then
        -- Robust ID: use GetDebugId if available, else fallback
        local ok, id = pcall(function()
            return animal:GetDebugId(100)
        end)
        if ok and id then
            idStr = " [" .. tostring(id):sub(1, 8) .. "]"
        end
    end
    local pp = animal.PrimaryPart
    local pos = pp and pp.Position or Vector3.new()
    return string.format("%s%s\nPos: %s", animal.Name, idStr, fmtVec3(pos))
end

local function clearMissingParagraphs(currentSet)
    -- Remove UI paragraphs for animals that no longer exist
    for instanceRef, para in pairs(AnimalParagraphs) do
        if not currentSet[instanceRef] then
            -- Destroy paragraph UI by resetting to empty and dropping ref
            para:Set("Removed", nil, nil, true)
            AnimalParagraphs[instanceRef] = nil
        end
    end
end

-- === Core updater ===
function updateDisplay()
    local container = workspace:FindFirstChild("RenderedMovingAnimals")
    if not container then
        StatusLabel:Set("Status: 'RenderedMovingAnimals' not found")
        -- Also nuke any previous paragraphs since container is missing
        clearMissingParagraphs({})
        return
    end

    local children = container:GetChildren()
    StatusLabel:Set(("Status: %d animal%s"):format(#children, #children == 1 and "" or "s"))

    -- Track which ones we saw this frame
    local seen = {}

    for _, animal in ipairs(children) do
        seen[animal] = true
        local para = AnimalParagraphs[animal]

        if not para then
            -- Create a new paragraph for this animal
            para = Tab:CreateParagraph({
                Title = animal.Name,
                Content = animalInfo(animal)
            })
            AnimalParagraphs[animal] = para

            -- Clean up mapping if the instance is removed from the game
            animal.AncestryChanged:Connect(function(_, parent)
                if parent == nil and AnimalParagraphs[animal] then
                    AnimalParagraphs[animal]:Set("Removed", "Deleted from workspace")
                    AnimalParagraphs[animal] = nil
                end
            end)
        else
            -- Update existing paragraph
            para:Set({ Title = animal.Name, Content = animalInfo(animal) })
        end
    end

    clearMissingParagraphs(seen)
end

-- Initial draw
updateDisplay()

-- === Auto refresh loop using Heartbeat with dt accumulator ===
local RunService = game:GetService("RunService")
local accum = 0
RunService.Heartbeat:Connect(function(dt)
    if not AutoRefreshEnabled then return end
    accum += dt
    if accum >= RefreshRate then
        accum = 0
        updateDisplay()
    end
end)

-- Optional: quick toast so users know where to toggle the UI
Rayfield:Notify({
    Title = "Animal Viewer",
    Content = "Press 'K' to toggle the UI",
    Duration = 4.5,
    Image = "rewind"
})

-- Load saved config (restores flags like AutoRefresh, RefreshRate, ShowIDs)
Rayfield:LoadConfiguration()
